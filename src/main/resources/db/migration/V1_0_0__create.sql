-- DROP TABLE IF EXISTS todo;
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

create function nextval(name text) returns bigint as $$
declare
    prefix text;
    buckets int;
    sequence regclass;
begin
    prefix :=   regexp_replace(name,'^(.*)%([0-9]+)$','\1');
    if prefix = name then
        sequence:=name::regclass;
    else
        buckets := regexp_replace(name,'^(.*)%([0-9]+)$','\2');
        sequence:=(prefix||(pg_backend_pid()%buckets)::text)::regclass;
    end if;
    return pg_catalog.nextval(sequence);
end;
$$ language plpgsql;

CREATE TABLE IF NOT EXISTS todo
(
    id           uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
    task         text,
    status       boolean,
    created_at   timestamp default now()
);

CREATE SEQUENCE IF NOT EXISTS todo_s_id_seq START 1 INCREMENT BY 10;

CREATE SEQUENCE IF NOT EXISTS todo_sc_id_seq START 1 INCREMENT BY 1 CACHE 100;

CREATE TABLE IF NOT EXISTS todo_s
(
    id           integer DEFAULT nextval('todo_s_id_seq') PRIMARY KEY,
    task         text,
    status       boolean,
    created_at   timestamp NOT NULL DEFAULT now()
);

CREATE TABLE IF NOT EXISTS todo_i
(
--     id           serial PRIMARY KEY,
    id           INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    task         text,
    status       boolean,
    created_at   timestamp NOT NULL default now()
);

-- scalable sequence
CREATE TABLE IF NOT EXISTS todo_scale
(
    id           integer DEFAULT nextval('seq%4') PRIMARY KEY,
    task         text,
    status       boolean,
    created_at   timestamp NOT NULL DEFAULT now()
);

create sequence if not exists seq0 minvalue 0 start with 0 cache 100 increment by 4;
create sequence if not exists seq1 minvalue 1 start with 1 cache 100 increment by 4;
create sequence if not exists seq2 minvalue 2 start with 2 cache 100 increment by 4;
create sequence if not exists seq3 minvalue 3 start with 3 cache 100 increment by 4;

-- partitioned table flow

CREATE TABLE todo_ip
(
    id           serial,
    created_at   timestamp NOT NULL DEFAULT now(),
    task         text,
    status       boolean,
    PRIMARY KEY (id, created_at)
) PARTITION BY RANGE (created_at);

CREATE TABLE todo_ip_2023 PARTITION OF todo_ip FOR VALUES FROM ('2023-01-01') TO ('2024-01-01');

CREATE SEQUENCE IF NOT EXISTS todo_sp_id_seq START 1;

CREATE TABLE todo_sp
(
    id           integer NOT NULL DEFAULT nextval('todo_sp_id_seq'),
    created_at   timestamp NOT NULL DEFAULT now(),
    task         text,
    status       boolean,
    PRIMARY KEY (id, created_at)
) PARTITION BY RANGE (created_at);

CREATE TABLE todo_sp_2023 PARTITION OF todo_sp FOR VALUES FROM ('2023-01-01') TO ('2024-01-01');